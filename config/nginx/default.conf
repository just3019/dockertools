#########################################################
#                   expires config                      #
#########################################################
map $sent_http_content_type $expires {
    default                    off;
    text/html                  off;
    text/css                   max;
    application/javascript     max;
    ~image/                    max;
}

server {
    listen       80;
    server_name  localhost ingress;
    root         /usr/share/nginx/html;

    # expires config
    expires $expires;

    location /DevSocOps/api {
        rewrite             '^/DevSocOps/api/(.+)' /api/$1 break;
        proxy_pass          http://192.168.19.216:9091;
        proxy_redirect      off;                                                #禁止修改header
        proxy_set_header    Host $host;                                         #修改发送header的host
        proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
        proxy_set_header    X-Real-PORT $remote_port;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Cache-Control must-revalidate;
    }

    location /api {
        proxy_pass          http://10.11.33.155:8888;
        proxy_redirect      off;                                                #禁止修改header
        proxy_set_header    Host $host;                                         #修改发送header的host
        proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
        proxy_set_header    X-Real-PORT $remote_port;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Cache-Control must-revalidate;
    }

    # location /metabase/ {
    #     proxy_pass          http://metabase:3000/;
    #     proxy_redirect      off;                                                #禁止修改header
    #     proxy_set_header    Host $host;                                         #修改发送header的host
    #     proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
    #     proxy_set_header    X-Real-PORT $remote_port;
    #     proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header    Cache-Control must-revalidate;
    #     proxy_hide_header   Content-Security-Policy;
    #     proxy_hide_header   X-Content-Type-Options;
    #     proxy_hide_header   X-Frame-Options;
    #     proxy_hide_header   X-XSS-Protection;
    #     proxy_hide_header   X-Permitted-Cross-Domain-Policies;
    # }

    # location /kkfileview/ {
    #     proxy_pass          http://kkfileview:8012/;
    #     proxy_redirect      off;                                                #禁止修改header
    #     proxy_set_header    Host $host;                                         #修改发送header的host
    #     proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
    #     proxy_set_header    X-Real-PORT $remote_port;
    #     proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header    Cache-Control must-revalidate;
    # }

    location /minio/ {
        proxy_pass          http://minio:9000/minio/;
        proxy_redirect      off;                                                #禁止修改header
        proxy_set_header    Host $host;                                         #修改发送header的host
        proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
        proxy_set_header    X-Real-PORT $remote_port;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Cache-Control must-revalidate;
    }

    location /minioaicso/ {
        proxy_pass          http://minio:9000/minioaicso/;
        proxy_redirect      off;                                                #禁止修改header
        proxy_set_header    Host $host;                                         #修改发送header的host
        proxy_set_header    X-Real-IP $remote_addr;                             #真实IP
        proxy_set_header    X-Real-PORT $remote_port;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Cache-Control must-revalidate;
    }

    location / {
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    location /sw.js {
        add_header Cache-Control "no-store";
        proxy_cache_bypass $http_pragma;
        proxy_cache_revalidate on;
        expires off;
        access_log off;
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }

    access_log  off; # 减少nginx读写,提升性能,只记录错误日志
    server_tokens off; # 隐藏头信息

    #########################################################
    #                     GZip config                       #
    #########################################################

    # reduce the data that needs to be sent over network -- for testing environment

    gzip on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    #########################################################
    #                     cache config                      #
    #########################################################

    open_file_cache max=100000 inactive=20s;  # 开启缓存的同时也指定了缓存文件的最大数量，20s如果文件没有被请求则删除缓存
    open_file_cache_valid 30s;                # 多长时间检查一次缓存的有效期
    open_file_cache_min_uses 2;               # 有效期内缓存文件最小的访问次数，只有访问超过2次的才会被缓存
    open_file_cache_errors on;                # 当搜索一个文件时是否缓存错误信息

    #########################################################
    #                Simple DDoS Defense                    #
    #########################################################

    client_max_body_size 50m;  # 允许客户端请求的最大单文件字节数
    client_header_buffer_size 3m; # 客户端请求头缓冲区大小
    proxy_redirect off;   # 是否启用对发送给客户端的URL进行修改
    large_client_header_buffers 4 256k;   # 用于从客户端请求读取大型头的最大缓冲区数和大小

    #########################################################
    #                     other config                      #
    #########################################################

    add_header X-Frame-Options sameorigin;# 减少点击劫持
    add_header X-Content-Type-Options nosniff; # 禁止服务器自动解析资源类型
    add_header X-Xss-Protection 1; # 防XSS攻擊
}
